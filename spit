#!/usr/bin/env python3

# This file is part of spit, a simpler way to eject devices with udisks
# 
# Copyright (C) 2012 Andy Teijelo <ateijelo@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# The file 'LICENSE' contains the text of the GNU General Public License.

import dbus
import sys
import os

class DevMap:
    def __init__(self):
        self.pathdic = {}
        self.namedic = {}

    def __getitem__(self,path):
        return self.pathdic[path]

    def addDev(self,udisks_device):
        d = Dev(udisks_device)
        f = d.deviceFile
        if f in self.pathdic:
            return
        self.pathdic[f] = d
        self.addName(f,d)
        for m in d.mountPoints:
            self.addName(m,d)
        if d.isPartition:
            pf = d.parentDeviceFile
            po = d.parentUDisksDevice
            self.addDev(po) # Here's where the magic happen
                            # If the map already has the device, it won't add a new one...
            p = self.pathdic[pf] # ...and this line will return the one that was already there.
            d.parent = p
            p.addChild(d)

    def addName(self,path,d):
        self.namedic[self.basename(path)] = d

    def basename(self,path):
        return os.path.basename(os.path.realpath(path))

    def find(self,name):
        return self.namedic.get(name,None)

class Dev:
    def __init__(self,udisks_device):
        self.dev = udisks_device
        self.children = []
        self.parent = None

    @property
    def deviceFile(self):
        return str(self.dev.Get("","DeviceFile"))

    @property
    def mountPoints(self):
        l = []
        for m in self.dev.Get("","DeviceMountPaths"):
            l.append(str(m))
        return l

    @property
    def parentDeviceFile(self):
        if self.dev.Get("","DeviceIsPartition"):
            slave = self.dev.Get("","PartitionSlave")
            o = bus.get_object("org.freedesktop.UDisks",slave)
            return str(o.Get("","DeviceFile"))
        return None

    @property
    def parentUDisksDevice(self):
        if self.dev.Get("","DeviceIsPartition"):
            slave = self.dev.Get("","PartitionSlave")
            return bus.get_object("org.freedesktop.UDisks",slave)
        return None

    @property
    def isPartition(self):
        return bool(self.dev.Get("","DeviceIsPartition"))

    @property
    def isMounted(self):
        return bool(self.dev.Get("","DeviceIsMounted"))

    def addChild(self,child):
        self.children.append(child)

    def unmount(self):
        if not self.isMounted:
            return
        self.dev.FilesystemUnmount(dbus.Array([],"s"))

    def eject(self):
        self.dev.DriveEject(dbus.Array([],"s"))

    def __str__(self):
        return "Dev(deviceFile={},parent={},mountPoints={},children={})".format(self.deviceFile,self.parent,self.mountPoints,[x.deviceFile for x in self.children])

    def __repr__(self):
        return self.__str__()

devmap = DevMap()

def eject(dev):
    p = dev
    while p.isPartition:
        p = p.parent
    for c in p.children:
        c.unmount()
    p.eject()

bus = dbus.SystemBus()
udisks = bus.get_object("org.freedesktop.UDisks","/org/freedesktop/UDisks")
for path in udisks.EnumerateDevices():
    dev = bus.get_object("org.freedesktop.UDisks",path)
    devmap.addDev(dev)

arg = os.path.basename(os.path.realpath(sys.argv[1]))
try:
    eject(devmap.find(arg))
except dbus.DBusException as ex:
    print(ex.get_dbus_message(),file=sys.stderr)

